module Recursion

%access public export

interface Base t (f: Type -> Type) where

interface (Functor f, Base t f) => Recursive (f : Type -> Type) (t : Type) where
    project : t -> f t

interface (Functor f, Base t f) => Corecursive (f : Type -> Type) (t : Type) where
  embed : f t -> t

ana : (Corecursive f t, Base a f) => (a -> f a) -> a -> t
ana g = a'
  where a' x = embed . map a' . g $ x

cata : (Recursive f t, Base a f) => (f a -> a) -> t -> a
cata f = c where
  c x = f . map c . project $ x

hylo : Functor f => (f b -> b) -> (a -> f a) -> a -> b
hylo f g = h
  where h x = f . map h . g $ x

coelgot : Functor f => ((a, f b) -> b) -> (a -> f a) -> a -> b
coelgot phi psi = h where h = phi . (\x => (x, (map h . psi) x))

elgot : Functor f => (f a -> a) -> (b -> Either a (f b)) -> b -> a
elgot phi psi = h where h = (id `either` phi . map h) . psi

micro : (Functor f, Corecursive f a) => (b -> Either a (f b)) -> b -> a
micro = elgot embed

lambek : (Recursive f t, Corecursive f t, Base (f t) f) => (t -> f t)
lambek = cata (map embed)

colambek : (Recursive f t, Corecursive f t, Base (f t) f) => (f t -> t)
colambek = ana (map project)

data ListF : Type -> Type -> Type where
  Nil : ListF _ _
  Cons : a -> b -> ListF a b

implementation Functor (ListF a) where
  map _ Nil        = Nil
  map f (Cons a b) = Cons a (f b)

implementation Base b (ListF a) where

implementation Recursive (ListF a) (List a) where
  project [] = NilF
  project (x::xs) = Cons x xs

implementation Corecursive (ListF a) (List a) where
  embed NilF = []
  embed (Cons x xs) = x::xs

sum : Num a => List a -> a
sum = cata a where
  a Nil        = 0
  a (Cons x y) = x + y
